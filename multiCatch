import kotlin.reflect.KClass
import kotlin.reflect.full.isSubclassOf

class NegetiveNumber : Exception()
class StringFalse : Exception()

fun <R> Exception.multiCatch(vararg classes: KClass<*>, block: () -> R): R {
    return if (classes.any {
            this::class.isSubclassOf(it)
        }) block()
    else throw this
}

class Human() {
    var name = ""
        set(name) {
            if (name.isEmpty()) {
                throw StringFalse()
            } else {
                field = name
            }
        }
    var age = 0
        set(age) {
            if (age <= 0) {
                throw NegetiveNumber()
            } else {
                field = age
            }
        }
}


fun main() {
    val human = Human()
    human.name = "Omidreza"
    human.age = 0

    try {
        println(human.name)
        println(human.age)
    } catch (e: Exception) {
        e.multiCatch(NegetiveNumber::class, StringFalse::class) {
            println(e.message)
        }
    }finally {
        println("end")
    }

}
